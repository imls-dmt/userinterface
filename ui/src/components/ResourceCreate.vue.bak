<template>
  <div>
    <h1>Create a new learning resource</h1>
    <div
      v-if="
        groups.includes('admin') ||
        groups.includes('editor') ||
        groups.includes('reviewer') ||
        groups.includes('submitter')
      ">
      <h2>Advanced submission form</h2>
      <div>
        <Form @submit="handleSubmission">
          <div
            v-for="(group, index) in this.advancedMetadataFields"
            :key="index"
          >
            <div class="form-section-head">{{ group['groupTitle'] }}</div>
            
            <!-- Handle specialized field groups -->
            <div v-if="group['group'] == 'authors'">
              <MetaElementAuthors
                :template="this.flatMetadata"
                :authorFields="group['fields']" />
            </div>
            
            <div v-else-if="group['group'] == 'author_org'">
              <MetaElementAuthorOrgs
                :template="this.flatMetadata"
                :authorOrgFields="group['fields']" />
            </div>
            
            <div v-else-if="group['group'] == 'contributors'">
              <MetaElementContributors
                :template="this.flatMetadata"
                :contributorFields="group['fields']" />
            </div>
            
            <div v-else-if="group['group'] == 'contributor_orgs'">
              <MetaElementContributorOrgs
                :template="this.flatMetadata"
                :contributorOrgFields="group['fields']" />
            </div>
            
            
            <!-- Handle the rest of the field groups using default processing -->
            <div v-else>
              <div v-for="field in group['fields']" :key="field">
                <MetaElement 
                  :element='this.flatMetadata[field]'
                  :fieldName='field' />
                <p class="diagnostic"> {{ this.flatMetadata[field] }} </p>
              </div>
            </div>
            
          </div>
        </Form>
      </div>
    </div>

    <div v-else-if="groups.includes('lauth')">Basic submission form</div>

    <div v-else>
      Your assigned group is not authorized to submit new learning resources.
    </div>
    
    <span v-if="!loggedin"
      ><p>
        <router-link :to="{ name: 'Login' }">Login</router-link> to create and
        submit a new learning resource.
      </p></span
    >
    <span v-else>
      <hr/>
      You are logged in as <b>{{ username }}</b
      >, and your assigned groups are
      <span v-for="(group, index) in groups" :key="index">
        <span v-if="index > 0">, </span>
        <b>{{ group }}</b>
      </span>
    </span>
    
    
  </div>
</template>

<script>
import { Form } from "vee-validate";
//import * as yup from "yup";
import { mapGetters } from "vuex";
import MetaElement from "./metaElement.vue";
import MetaElementAuthors from "./metaElementAuthors.vue";
import MetaElementAuthorOrgs from "./metaElementAuthorOrgs.vue";
import MetaElementContributors from "./metaElementContributors.vue";
import MetaElementContributorOrgs from "./metaElementContributorOrgs.vue";

export default {
  name: "ResourceCreate",
  components: {
    MetaElement,
    MetaElementAuthors,
    MetaElementAuthorOrgs,
    MetaElementContributors,
    MetaElementContributorOrgs,
    Form,
  },


  data() {
    //const schema = yup.object().shape({
    //  title: yup.string().required("Title is required!"),
    //  url: yup.string().required("Resource URL is required!"),
    //});
    return {
      isLoaded: false,
      fetchBase: "/api/resource/?metadata=true",
      fetchURL: "",
      metadata: {},
      flatMetadata: {},
      keyName: "",
      //schema,
      basicMetadataFields: [
        {
          "group": "general",
          "groupTitle": "Core Information",
          "fields": [
            "general___submitter_name",
            "general___submitter_email",
            "general___title",
            "general___abstract_data",
          ],
        },        
      ],
      baseMetadataForRendering: [],
      advancedMetadataFields: [
        {
          "group": "general",
          "groupTitle": "Core Information",
          "fields": [
            "general___submitter_name",
            "general___submitter_email",
            "general___title",
            "general___abstract_data",
            "general___keywords",
            "general___url",
            "general___language_primary",
            "general___languages_secondary",
            "general___media_type",
            "general___publisher",
            "general___resource_modification_date",
            "general___usage_info",
          ],
        },
        {
          "group": "authors",
          "groupTitle": "Authors",
          "fields": [
            "authors___authors__familyName",        
            "authors___authors__givenName",        
            "authors___authors__name_identifier",        
            "authors___authors__name_identifier_type",                
          ],
        },
        {
          "group": "author_org",
          "groupTitle": "Authoring Organizations",
          "fields": [
            "authors___author_org__name",        
            "authors___author_org__name_identifier",        
            "authors___author_org__name_identifier_type",               
          ],
        },
        {
          "group": "contributors",
          "groupTitle": "Contributors",
          "fields": [
            "contributors___contributors__familyName",        
            "contributors___contributors__givenName", 
            "contributors___contributors__type",
          ],
        },
        {
          "group": "contributor_orgs",
          "groupTitle": "Contributing Organizations",
          "fields": [
            "contributors___contributor_orgs__name",
            "contributors___contributor_orgs__type",
          ],
        },
        {
          "group": "educational_information",
          "groupTitle": "Educational Information",
          "fields": [
            "educational_information___lr_type",        
            "educational_information___purpose", 
            "educational_information___subject",
            "educational_information___target_audience",
          ],
        },
        {
          "group": "ed_frameworks",
          "groupTitle": "Educational Frameworks",
          "fields": [
            "educational_information___ed_frameworks__name",        
            "educational_information___ed_frameworks__nodes__name", 
            "educational_information___ed_frameworks__nodes__description",
          ],
        },
        {
          "group": "resource_contact",
          "groupTitle": "Resource Contact Information",
          "fields": [
            "resource_contact___contact__name",        
            "resource_contact___contact__org",              
            "resource_contact___contact__email",              
          ],
        },
        {
          "group": "access_conditions",
          "groupTitle": "Access Conditions",
          "fields": [
            "access_conditions___license",        
            "access_constraints___access_cost",              
          ],
        },
        {
          "group": "accessibility",
          "groupTitle": "Accessibiilty Features",
          "fields": [
            "accessibility___accessibility_features__name",        
            "accessibility___accessibility_summary",              
          ],
        },
        {
          "group": "resource_location",
          "groupTitle": "Resource Location",
          "fields": [
            "resource_location___locator_data",        
            "resource_location___locator_type",              
          ],
        },
      ],
      advancedMetadataForRendering: [],
    };
  },

  created() {
    this.fetchTemplate();
  },

  //  beforeUpdate() {
  //    this.$store.dispatch("getGroups").then(() => {
  //      console.log("getting the user's groups");
  //    });
  //  },

  computed: {
    ...mapGetters(["loggedin", "username", "groups"]),
  },

  methods: {
    fetchTemplate() {
      console.log("entering fetchTemplate");
      this.isLoaded = false;
      this.fetchURL = this.$apiBase.concat(this.fetchBase);
      console.log("Request URL: ", this.fetchURL);
      fetch(this.fetchURL, {
        method: "GET",
      })
        .then((response) => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error();
          }
        })
        .then((result) => {
          this.metadata = result;
          console.log(this.metadata);
          this.buildMetadataForRendering();
        })
        .catch(() => {});
    },
    buildMetadataForRendering() {
      // refactor grouped metadata object into flat/combined group-field keys and expanded content
      this.flatMetadata = {};
      for (let group in this.metadata) {
        for (let element in this.metadata[group]["fields"]) {
          if ("name" in this.metadata[group]["fields"][element]) {
            this.keyName =
              this.metadata[group]["name"] +
              "___" +
              this.metadata[group]["fields"][element]["name"];
          } else if ("facet" in this.metadata[group]["fields"][element]) {
            this.keyName =
              this.metadata[group]["name"] +
              "___" +
              this.metadata[group]["fields"][element]["facet"];
          } else {
            this.keyName = this.metadata[group]["name"] + "___undefined";
          }
          this.keyName = this.keyName.replace(".", "__");
          //console.log(this.keyName);
          //console.log(this.metadata[group]['fields'][element])
          this.flatMetadata[this.keyName] =
            this.metadata[group]["fields"][element];
          this.flatMetadata[this.keyName]["keyName"] = this.keyName;
        }
      }
      console.log(this.flatMetadata);
    },
    handleSubmission() {
      console.log("entering handle submission");
    },
  },
};
</script>

<style scoped></style>
